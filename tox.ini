[tox]
envlist = py27,pep8
minversion = 2.0
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
passenv = TRACE_FAILONLY
usedevelop = False
install_command = 
    pip install -U {opts} {packages}
deps = -r{toxinidir}/requirements.txt
whitelist_externals = bash
commands =
  dsvm-functional: {toxinidir}/tools/deploy_rootwrap.sh {toxinidir} {envdir}/etc {envdir}/bin
  sh tools/pretty_tox.sh '{posargs}'
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

# [testenv:bashate]
#     deps =
#         {env:BASHATE_INSTALL_PATH:bashate==0.4.0}
#     whitelist_externals = bash
#     commands = bash -c "find {toxinidir}             \                                                               
#          -not \( -type d -name .?\* -prune \)    \                                                               
#          -not \( -type d -name doc -prune \)     \                                                               
#          -not \( -type d -name shocco -prune \)  \                                                               
#          -type f                                 \                                                               
#          -not -name \*~                          \                                                               
#          -not -name \*.md                        \                                                               
#          -not -name \*.sql                       \                                                               
#          -not -name stack-screenrc               \                                                               
#          -not -name \*.orig                      \                                                               
#          -not -name \*.rej                       \                                                               
#          \(                                      \                                                               
#           -name \*.sh -or                        \                                                               
#           -name \*rc -or                         \                                                               
#           -name functions\* -or                  \                                                               
#           -wholename \*/inc/\* -or               \                                                               
#           -wholename \*/lib/\*                   \                                                               
#          \)                                      \                                                               
#          -print0 | xargs -0 bashate -v -iE006 -eE005,E042"


[testenv:pep8]
basepython=python2.7
deps =
  {[testenv]deps}
commands=
  # If it is easier to add a check via a shell script, consider adding it in this file
  # Checks for coding and style guidelines
  # sh ./tools/misc-sanity-checks.sh
# TODO(dkehn) need to turn this on.
#   {toxinidir}/tools/check_unit_test_structure.sh
  # Checks for coding and style guidelines
  flake8
  # sh ./tools/coding-checks.sh --pylint '{posargs}'
whitelist_externals =
  sh
  bash

# [testenv:cover]
# commands =
#   python setup.py testr --coverage --testr-args='{posargs}'
#   coverage report

[testenv:venv]
commands = {posargs}

# [testenv:docs]
# commands = sphinx-build -W -b html doc/source doc/build

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# E265 block comment should start with ‘# ‘
# H305 imports not grouped correctly
# H404 multi line docstring should start with a summary
# H405 multi line docstring summary not separated with an empty line
ignore = E125,E126,E128,E129,E265,H305,H404,H405
show-source = true
max-line-length = 99
builtins = _
# icp/tests/tempest needs to be excluded so long as it continues
# to be copied directly from tempest, since tempest and neutron do not
# share a flake8 configuration.
exclude = ./.*,build,dist,icp/netdevops/common/*,icp/tests/tempest

[hacking]
#import_exceptions = neutron.i18n
#local-check-factory = neutron.hacking.checks.factory

